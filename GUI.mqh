#property copyright "Copyright 2013, MetaQuotes Software Corp."
#property link      "http://www.mql5.com"
#include <Object.mqh>
#include <Arrays\List.mqh>
#include <Arrays\ArrayObj.mqh>


///
/// Указывает тип используемых координат.
///
enum ENUM_TYPE_COORDINATE
{
   ///
   /// Используются глобальные координаты, указывающие расположение относительно текущего окна MetaTrader.
   ///
   Global,
   ///
   /// Используются локальные координаты, указывающие расположение относительно родительского графического узла.
   ///
   Local
};

///
/// <b>Координаты графического узла.</b>
/// Каждый графический узел (объект) GNode находится внутри другого такого же графического узла. Структура CoordinateNode указывает координаты
/// этого графического узла. Координаты могут быть локальными - т.е. указывать смещение текущего узла относительно границ родительского узла
/// и глобальные - указывающие обсолютные координаты текущего узла. Тип координат задается структурой ENUM_TYPE_COORDINATE. По умолчанию используются
/// глобальные координаты элемента. Локальные координаты конвертируются в глобальные и наоборот с помощью функции SetCoordinatesType.
/// Используйте эту функцию устанавливая текущий контекст координат в зависимости от того, какой тип координат требуется для работы.
///
class CoordinateNode
{
   public:
      ///
      /// Устанавливает тип текущих координат. После вызова функции координаты будут автоматически пересчитанны таким образом, что бы их
      /// значения соответствовали выбранному типу координат.
      /// \param ctype       - Тип координат, которые требуется использовать.
      /// \return Истина, если перерасчет координат и смена контекста выполнены успешно и ложь в обратном случае.
      bool SetCoordinatesType(ENUM_TYPE_COORDINATE ctype);
      ///
      /// Возвращает тип используемых координат.
      /// \return Тип используемых координат, которые используются в текущий момент.
      ///
      ENUM_TYPE_COORDINATE GetCoordinatesType(void){return typeCoordinate;}
      ///
      /// Создает глобальные координаты.
      ///
      CoordinateNode(void){typeCoordinate = typeCoordinate.Global;}
      ///
      /// Создает координаты с указанием их типа.
      ///
      CoordinateNode(ENUM_TYPE_COORDINATE ctype){typeCoordinate = ctype;}
   private:
      ///
      /// Тип используемых координат.
      ///
      ENUM_TYPE_COORDINATE typeCoordinate;
};
//ЗАГЛУШКА
bool CoordinateNode::SetCoordinatesType(ENUM_TYPE_COORDINATE ctype)
{
   return true;
}
///
/// <b>Описывает размер графического узла.</b> Каждый графический узел GNode имеет свою высоту и ширину в пикселях, а также флаг, указывающий видим ли текущий узел или нет.
///
class SizeNode
{
   public:
      ///
      /// Ширина графического узла GNode в пунктах.
      ///
      int Width;
      ///
      /// Высота графического узла GNode в пунктах.
      ///
      int High;
      ///
      /// Истина, если текущий элемент отрисовывается на графике, ложь - в противном случае.
      ///
      bool Visible;
};

///
/// <b>Универсальный графический узел.</b> Каждый графический элемент, будь то кнопка, текстовая метка или изображение, упаковывается в специальный класс-контейнер GNode.
/// Этот класс-контейнер в свою очередь входит во внутрь такого же класса-родителя. Например кнопка с надписью находящаяся на графической форме образует трехуровневую
/// иерарахию: на самом высоком уровне находится элемент GNode представляющий визуальную форму, внутри него находится такой же элемент представляющий кнопку, а внутри этого
/// элемента будет находится последний графический узел представляющий надпись.
///
class GNode : CObject
{
   public:
      ///
      /// Двигает текущий графический узел на новые координаты.
      /// \return Истина, если передвижение прошло удачно, ложь - в противном случае.
      ///
      bool Move(CoordinateNode *newCoordinates);
      ///
      /// Устанавливает новый размер для текущего графического узла, а также его флаг видимости.
      /// \param newSize - новый размер узла, который требуется установить.
      /// \return Истина, если новый размер был удачно установлен, ложь в противном случае.
      bool Resize(SizeNode *newSize);
      ///
      /// Возвращает глобальные координаты текущего объекта.
      /// \return Глобальные координаты текущего объекта.
      ///
      CoordinateNode GetCoordinates(void);
      ///
      /// Возвращает размер текущего графического узла, а также флаг его видимости.
      ///
      SizeNode GetSize(void);
   private:
      /// <b>Дочерние элементы GNode, распологающиеся внутри текущего графического узла.</b>
      /// Внутри текущего графического узла GNode может находится
      /// неограниченное количество таких же, дочерних визуальных элементов
      /// (MQL5 не поддерживает рекурсивное объявление классов, а
      /// CArrayObj не может работать с потомками CObject, поэтому
      /// используем массив элементов CObject)
      CArrayObj childNodes;
      ///
      /// Координаты родительского графического узла.
      ///
      CoordinateNode parentCoord;
      ///
      /// Размер родительского графического узла.
      ///
      SizeNode parentSize;
      ///
      /// Содержит информацию о координатах текущего узла.
      ///
      CoordinateNode coordinates;
      ///
      /// Содержит информацию о размере текущего узла и его видимости.
      ///
      SizeNode size;
};