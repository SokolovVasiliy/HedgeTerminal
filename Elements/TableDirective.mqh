#define TABLE_DIRECTIVE_MQH
///
/// Определяет тип таблицы позиций. Используется в качестве части комбинированного поля совместно с ENUM_TABLE_TYPE_ELEMENT.
///
enum ENUM_TABLE_TYPE
{
   ///
   /// Таблица по-умолчанию. Комбинация флагов не используется.
   ///
   TABLE_DEFAULT = 0,
   ///
   /// Таблица открытых позиций.
   ///
   TABLE_POSACTIVE = 1,
   ///
   /// Таблица исторических позиций.
   ///
   TABLE_POSHISTORY = 2,
};

///
/// Определяет тип конкретного визуального элемента, который входит в 
/// элемент визуального представления позиции/сделки/заголовка таблицы.
///
/*enum ENUM_TABLE_TYPE_ELEMENT
{
   ///
   /// Генерируемый элемент входит в состав заголовка таблицы.
   ///
   TABLE_HEADER = 4,
   ///
   /// Генерируемый элемент входит в состав графического представления позиции.
   ///
   TABLE_POSITION = 8,
   ///
   /// Графический элемент входит в состав графического представления сделки.
   ///
   TABLE_DEAL = 16
};*/

///
/// Класс содержит информацию, необходимую для создания конкретного
/// визуального элемента таблицы. Информация включает в себя: тип таблицы,
/// тип строки (заголовок, позиция, сделка и т.д.). По мере надобности в класс может
/// добавляться дополнительная информация необходимая для правильной генерации.
///
/*class TableDirective
{
   public:  
      //TableDirective()
      ///
      /// Возвращает тип таблицы, к которой будет принадлежать элемент.
      ///
      ENUM_TABLE_TYPE TableType(){return tableType;}
      ///
      /// Устанавливает тип таблицы, к которой будет принадлежать элемент.
      ///
      void TableType(ENUM_TABLE_TYPE tType){tableType = tType;}
      
      ///
      /// Возвращает тип элемента, который требуется сгенерировать.
      ///
      ENUM_TABLE_TYPE_ELEMENT TableElement(){return tableElement;}
      ///
      /// Устанавливает тип элемента, который требуется сгенерировать.
      ///
      void TableElement(ENUM_TABLE_TYPE_ELEMENT el){tableElement = el;}
      ///
      /// Возвращает истину, если строка сделки, визуальное представление которой требуется
      /// сгенерировать, является последней в списке.
      ///
      bool IsLastDeal(){return lastDeal;}
      ///
      /// Устанавливает статус, указывающий, является ли строка сделки последней в списке
      /// сделок. Используется для определения значка элемента TrewViewBox для сделки.
      ///
      void IsLastDeal(bool lDeal){lastDeal = lDeal;}
      ///
      /// Возвращает истину, если таблица, для которой относиться визуальный элемент
      /// относиться к классу таблиц позиций (исторических и активных).
      ///
      bool IsPositionTable()
      {
         if(tableType == TABLE_POSACTIVE || tableType == TABLE_POSHISTORY)
            return true;
         return false;
      }
   private:
      ///
      /// Содержит тип таблицы, к которой будет принадлежать элемент.
      ///
      ENUM_TABLE_TYPE tableType;
      ///
      /// Содержит тип элемента, который требуется сгенерировать.
      ///
      ENUM_TABLE_TYPE_ELEMENT tableElement;
      ///
      /// Только для сделок. Содержит истину, если строка сделки, визуальное представление
      /// которой требуется сгенерировать, является последней в списке.
      ///
      bool lastDeal;
};*/
