class PanelSettings;
PanelSettings* Settings;

enum ENUM_COLOR_TYPE
{
   COLOR_TEXT,
   COLOR_SYSTEM1,
   COLOR_SYSTEM2,
};

#define LESS -1;
#define GREATE 1;
#define EQUAL 0;
///
/// Признаки, по которым может быть отсортирован список ордеров.
///
enum ENUM_SORT_TRANSACTION
{
   ///
   /// Сортировка по магическому номеру.
   ///
   SORT_MAGIC,
   ///
   /// Сортировка по тикету ордера, трейда или входящему тикету позиции.
   ///
   SORT_ORDER_ID,
   ///
   /// Сортировка по исходящему тикету позиции или тикиту закрывающего трейда.
   ///
   SORT_EXIT_ORDER_ID,
   ///
   /// Сортировка по времени совершения трейда, выставлению ордера, активирования позиции.
   ///
   SORT_TIME,
   ///
   /// 
   ///
   SORT_EXIT_TIME
};
//---------------------------------------------------------------------------------------------------------------------------
// Классы-события.
/// Абстрактный базовый класс события, содержащий основные определения.
class Event;
/// Событие "Видимость визуального элемента изменена".
class EventVisible;
/// Событие "Размер визуального элемента изменен".
class EventResize;
/// Событие "Положение визуального элемента изменено".
class EventMove;
/// Событие "Пришел новый тик".
class EventNewTick;
/// Событие "Выполняется инициализация".
class EventInit;
/// Событие "Выполняется деинициализация".
class EventDeinit;
/// Событие "Команда на изменение видимости, положения и размера визуального элемента".
class EventNodeCommand;
/// Событие "Создана новая позиция".
class EventCreatePos;
/// Событие "Окно панели требуется обновить".
class EventRefresh;
/// Событие "Кнопка нажата/отжата".
class EventButtonPush;
/// Событие "Позиция удалена".
class EventDelPos;
/// Приказ - закрыть активную позицию.
class EventClosePos;
/// Событие "Элемент TreeViewBox раскрыт/закрыт".
class EventCollapseTree;
/// Событие "Приход нового времени".
class EventTimer;
/// Событие "Совершена новая сделка".
class EventAddDeal;
//---------------------------------------------------------------------------------------------------------------------------
// Классы визуальных элементов.

/// Базовый класс любого визуального элемента.
class ProtoNode;
/// Класс, группирующий элементы по определенным алгоритмам.
class Line;
/// Абстрактный базовый класс, поддерживающий ввод и отображение текста.
class TextNode;
/// Визуальный элемент "Таблица".
class Table;
/// Визуальный элемент "Кнопка".
class Button;
/// Визуальный элемент "CheckBox".
class CheckBox;
/// Визуальный элемент "TreeViewBox".
class TreeViewBox;
/// Класс "Вкладки"
class Tab;
/// Класс "Основная форма".
class MainForm;
/// Класс "Прокрутка списка".
class Scroll;


//------------------------------------------------------------------------------------------------------------------------------------
// Перечислители и константы
///
/// Идентификатор окна графика на котором запущена панель.
///
#define MAIN_WINDOW 0
///
/// Идентификатор подокна графика, на котором запущена панель.
///
#define MAIN_SUBWINDOW 0

///
/// Контекст передваемых координат для функции Move().
///
enum ENUM_COOR_CONTEXT
{
   ///
   /// Текущие координаты задаются относительно левого верхнего угла окна терминала.
   ///
   COOR_GLOBAL,
   ///
   /// Текущие координаты задаются относительно левого верхнего угла родительского узла.
   ///
   COOR_LOCAL
};

///
/// Состояние кнопки
///
enum ENUM_BUTTON_STATE
{
   ///
   /// Кнопка выключена, или отжата.
   ///
   BUTTON_STATE_OFF,
   ///
   /// Кнопка включена, или нажата.
   ///
   BUTTON_STATE_ON
};
///
/// Идентификатор указывающий, что не нажата ни одна из кнопок мыши.
///
#define MOUSE_NOTHING_PUSH 0
///
/// Идентификатор указывающий, что нажата правая кнопка мыши.
///
#define MOUSE_LEFT_BUTTON_PUSH 1
///
/// Идентификатор указывающий, что нажата левая кнопка мыши.
///
#define MOUSE_RIGHT_BUTTON_PUSH 2
///
/// Идентификатор указывающий, что нажата средняя кнопка мыши.
///
#define MOUSE_CENTER_BUTTON_PUSH 16

//-------------------------------------------------------------------------------------------------------
//
#ifndef SETTINGS_MQH
   #include "Settings.mqh"
#endif
#include "Keys.mqh"
#include "Time.mqh"
#include "Log.mqh"
#include "API\API.mqh"
#include "Events.mqh"
#include "Elements\Node.mqh"
#include "Elements\Elements.mqh"


/// Включение класса ProtoNode.


//#include "position.mqh"
